{"version":3,"sources":["sections/HomeSection/index.tsx","components/NavbarTop/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["HomeSection","id","className","style","borderBottom","library","add","fab","fas","NavbarTop","href","url","icon","iconSize","NavbarItemIcon","props","target","rel","size","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2SAyGeA,G,MArGK,WAClB,OACE,6BAASC,GAAG,GAAGC,UAAU,mBAEvB,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,4CACqB,IACnB,0BAAMC,MAAO,CAAEC,aAAc,qBAA7B,WAFF,QAQN,yBAAKF,UAAU,OACb,yBAAKA,UAAU,OACb,wBAAIA,UAAU,eAAd,eAIJ,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAd,wBACA,uBAAGA,UAAU,aAAb,sGAKF,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAd,SACA,4BACE,qCACA,6DACA,oDAEF,yCACA,4BACE,2DAGJ,yBAAKA,UAAU,eACb,2BAAOA,UAAU,cAAjB,6BAGJ,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAd,uBACA,uBAAGA,UAAU,aAAb,oFAKF,yBAAKA,UAAU,eACb,2BAAOA,UAAU,cAAjB,6BAGJ,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAd,oBACA,uBAAGA,UAAU,aAAb,kLAMF,yBAAKA,UAAU,aACb,qCACA,4BACE,qCACA,6DACA,oDAGF,yCACA,4BACE,2DAGJ,yBAAKA,UAAU,eACb,2BAAOA,UAAU,cAAjB,iCAQZ,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,4D,qCC3FVG,IAAQC,IAAIC,IAAKC,KAEV,IAAMC,EAAY,WACvB,OACE,yBAAKP,UAAU,aACb,yBAAKA,UAAU,qCACb,uBAAGA,UAAU,eAAeQ,KAAK,KAC/B,6CACA,mDAEF,yBAAKR,UAAU,4BACb,yBAAKA,UAAU,YACf,wBAAIA,UAAU,cACZ,wBAAIA,UAAU,YACZ,kBAAC,EAAD,CACES,IAAI,sCACJC,KAAM,CAAC,MAAO,UACdC,SAAS,QAGb,wBAAIX,UAAU,YACZ,kBAAC,EAAD,CACES,IAAI,+CACJC,KAAM,CAAC,MAAO,YACdC,SAAS,aAyBnBC,EAAiB,SAACC,GAKtB,OACE,uBACEb,UAAU,WACVQ,KAAMK,EAAMJ,IACZK,OAAO,SACPC,IAAI,uBAEJ,kBAAC,IAAD,CAAiBL,KAAMG,EAAMH,KAAMM,KAAMH,EAAMF,aCnDtCM,MAXf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkB,OAAK,EAACC,KAAK,IAAIC,UAAWtB,OCCrBuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAD,KAIE,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.037e5af2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport \"./style.scss\";\r\n\r\nconst HomeSection = (): JSX.Element => {\r\n  return (\r\n    <section id=\"\" className=\"container-fluid\">\r\n      {/* Greeting */}\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <div className=\"greeting\">\r\n            <h2>\r\n              Hi there! I&apos;m{\" \"}\r\n              <span style={{ borderBottom: \"3px solid orange\" }}>Michael</span>.\r\n            </h2>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* Skills Header */}\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <h3 className=\"text-center\">My Skills</h3>\r\n        </div>\r\n      </div>\r\n      {/* SKills */}\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <div className=\"container\">\r\n            <div className=\"card-group\">\r\n              <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                  <h4 className=\"card-title\">Frontend Development</h4>\r\n                  <p className=\"card-text\">\r\n                    When I began my first programming business in 2014, I\r\n                    quickly fell in love with web technologies.\r\n                  </p>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                  <h5 className=\"card-title\">Tools</h5>\r\n                  <ul>\r\n                    <li>Unity</li>\r\n                    <li>Node.js (for RESTful backend)</li>\r\n                    <li>MySQL (for storage)</li>\r\n                  </ul>\r\n                  <h5>Languages</h5>\r\n                  <ul>\r\n                    <li>C#, Javascript, XML, JSON</li>\r\n                  </ul>\r\n                </div>\r\n                <div className=\"card-footer\">\r\n                  <small className=\"text-muted\">Last updated 3 mins ago</small>\r\n                </div>\r\n              </div>\r\n              <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                  <h4 className=\"card-title\">Backend Development</h4>\r\n                  <p className=\"card-text\">\r\n                    This card has supporting text below as a natural lead-in to\r\n                    additional content.\r\n                  </p>\r\n                </div>\r\n                <div className=\"card-footer\">\r\n                  <small className=\"text-muted\">Last updated 3 mins ago</small>\r\n                </div>\r\n              </div>\r\n              <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                  <h4 className=\"card-title\">Game Development</h4>\r\n                  <p className=\"card-text\">\r\n                    I have had an interest for game development since I was a\r\n                    kid. Shortly after I began writing mods for Minecraft, I\r\n                    moved into Unity to start hacking away at my own projects.\r\n                  </p>\r\n                </div>\r\n                <div className=\"card-body\">\r\n                  <h5>Tools</h5>\r\n                  <ul>\r\n                    <li>Unity</li>\r\n                    <li>Node.js (for RESTful backend)</li>\r\n                    <li>MySQL (for storage)</li>\r\n                  </ul>\r\n\r\n                  <h5>Languages</h5>\r\n                  <ul>\r\n                    <li>C#, Javascript, XML, JSON</li>\r\n                  </ul>\r\n                </div>\r\n                <div className=\"card-footer\">\r\n                  <small className=\"text-muted\">Last updated 3 mins ago</small>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* Experience header */}\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <h3>Professional Experience</h3>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default HomeSection;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { library, IconProp } from \"@fortawesome/fontawesome-svg-core\";\r\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\r\nimport { fas } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./style.scss\";\r\n\r\nlibrary.add(fab, fas);\r\n\r\nexport const NavbarTop = (): JSX.Element => {\r\n  return (\r\n    <div className=\"NavbarTop\">\r\n      <nav className=\"navbar navbar-expand navbar-light\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          <h1>Michael Gates</h1>\r\n          <p>Fullstack Developer</p>\r\n        </a>\r\n        <div className=\"collapse navbar-collapse\">\r\n          <div className=\"mr-auto\"></div>\r\n          <ul className=\"navbar-nav\">\r\n            <li className=\"nav-item\">\r\n              <NavbarItemIcon\r\n                url=\"https://github.com/MichaelGatesDev/\"\r\n                icon={[\"fab\", \"github\"]}\r\n                iconSize=\"2x\"\r\n              />\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <NavbarItemIcon\r\n                url=\"https://www.linkedin.com/in/michaelgatesdev/\"\r\n                icon={[\"fab\", \"linkedin\"]}\r\n                iconSize=\"2x\"\r\n              />\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\ntype FontAwesomeIconSize =\r\n  | \"2x\"\r\n  | \"xs\"\r\n  | \"lg\"\r\n  | \"sm\"\r\n  | \"1x\"\r\n  | \"3x\"\r\n  | \"4x\"\r\n  | \"5x\"\r\n  | \"6x\"\r\n  | \"7x\"\r\n  | \"8x\"\r\n  | \"9x\"\r\n  | \"10x\"\r\n  | undefined;\r\nconst NavbarItemIcon = (props: {\r\n  url: string;\r\n  icon: IconProp;\r\n  iconSize: FontAwesomeIconSize;\r\n}): JSX.Element => {\r\n  return (\r\n    <a\r\n      className=\"nav-link\"\r\n      href={props.url}\r\n      target=\"_blank\"\r\n      rel=\"noopener noreferrer\"\r\n    >\r\n      <FontAwesomeIcon icon={props.icon} size={props.iconSize} />\r\n    </a>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { Switch, Route } from \"react-router\";\n\nimport HomeSection from \"./sections/HomeSection\";\nimport { NavbarTop } from \"./components/NavbarTop\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavbarTop />\n      <Switch>\n        <Route exact path=\"/\" component={HomeSection} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./index.scss\";\n\nReactDOM.render(\n  <HashRouter\n  // getUserConfirmation={optionalFunc}\n  // hashType={optionalString}\n  >\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}